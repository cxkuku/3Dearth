(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.jm = global.jm || {}, global.jm.common = global.jm.common || {})));
}(this, (function (exports) { 'use strict';

/**
 * 获取 URL 参数
 *
 * @param  {string} [url]    		url 地址，默认取当前浏览器地址参数
 * @param  {string|array} name 		希望获取的参数名称
 * @return {string|object}
 */
function getUrlQuery(url, name) {
	var getQueryParameters = function getQueryParameters(str) {
		str = (str || window.location.search).replace(/(^\?)/, '');

		return str.split('&').map(function (kv) {
			kv = kv.split('=');
			this[kv[0]] = kv[1];
			return this;
		}.bind({}))[0];
	};

	if (arguments.length === 1 && url.indexOf('=') < 0) {
		name = url;
		url = null;
	}

	var obj = getQueryParameters(url);

	if (!name) return obj;

	if (Object.prototype.toString.call(name) === '[object Array]') {
		var result = {};
		for (var i = 0; i < name.length; i++) {
			result[name[i]] = obj[name[i]] || null;
		}
		return result;
	} else {
		return obj[name];
	}
}

/**
 * 序列化对象
 *
 * @param  {object} data 需要序列化的对象
 * @return {string}
 */
function serialize(data) {
	return Object.keys(data).map(function (key) {
		return key + '=' + data[key];
	}).join('&');
}

/**
 * 对象类型相关判断
 * @module type
 */

/**
 * 获取指定对象的类型
 * @param  {type} obj 	对象
 * @return {string}     对象类型值
 */
function getType(obj) {
  return Object.prototype.toString.call(obj);
}

/**
 * 判断是否是function
 * @param  {object}  obj 对象
 * @return {Boolean}
 */
function isFunction(obj) {
  return typeof obj === 'function';
}

/**
 * 判断是否是Object
 * @param  {object}  obj 对象
 * @return {Boolean}
 */
function isObject(obj) {
  return '[object Object]' === getType(obj);
}

/**
 * 判断是否是array
 * @param  {object}  obj 对象
 * @return {Boolean}
 */
function isArray(obj) {
  return '[object Array]' == getType(obj);
}

/**
 * 判断是否是undefined
 * @param  {object}  obj 对象
 * @return {Boolean}
 */
function isUndefined(obj) {
  return '[object Undefined]' === getType(obj);
}

/**
 * 判断是否是null
 * @param  {object}  obj 对象
 * @return {Boolean}
 */
function isNull(obj) {
  return '[object Null]' == getType(obj);
}

/**
 * 判断是否是字符串
 * @param  {object}  obj 对象
 * @return {Boolean}
 */
function isString(obj) {
  return typeof obj === 'string';
}

/**
 * 判断是否是布尔类型
 * @param  {object}  obj 对象
 * @return {Boolean}
 */
function isBoolean(obj) {
  return typeof obj === 'boolean';
}

/**
 * 判断是否是一个数字
 * @param  {number}  num 数字
 * @return {Boolean}
 */
function isNumber(num) {
  return '[object Number]' === getType(num);
}

/**
 * 判断当前环境是否是 app
 * @param  {string}  name app 名称，支持名字 [ wx, qq, weibo, jd ]
 * @param  {string}  [ua]   userAgent 字符串
 * @return {Boolean}
 */
function isApp(name, ua) {
  ua = ua || navigator.userAgent;
  if (name === 'wx') return (/micromessenger/i.test(ua)
  );
  if (name === 'qq') return (/qq\//i.test(ua)
  );
  if (name === 'weibo') return (/weibo/i.test(ua)
  );
  if (name === 'jd') return (/^jdapp/i.test(ua)
  );
  return false;
}

/**
 * 判断是否为 android 设备
 * @param  {string}  [ua]   userAgent 字符串
 * @return {Boolean}
 */
function isAndroid(ua) {
  ua = ua || navigator.userAgent;
  return (/android/i.test(ua)
  );
}

/**
 * 判断是否为 ios 设备
 * @param  {string}  [ua]   userAgent 字符串
 * @return {Boolean}
 */
function isIOS(ua) {
  ua = ua || navigator.userAgent;
  return (/ip(hone|od)|ipad/i.test(ua)
  );
}

/**
 * 判断是否为平板设备
 * @param  {string}  [ua]   userAgent 字符串
 * @return {Boolean}
 */
function isTablet(ua) {
  ua = ua || navigator.userAgent;
  return (/ipad/i.test(ua) || /android/i.test(ua) && !/mobi|mini|fennec/i.test(ua)
  );
}

/**
 * 判断是否为手机设备
 * @param  {string}  [ua]   userAgent 字符串
 * @return {Boolean}
 */
function isMobile(ua) {
  ua = ua || navigator.userAgent;
  return !!ua.match(/ip(hone|od)|android.+mobile|windows (ce|phone)|blackberry|bb10|symbian|webos|firefox.+fennec|opera m(ob|in)i|polaris|iemobile|lgtelecom|nokia|sonyericsson|dolfin|uzard|natebrowser|ktf;|skt;/i);
}

/**
 * 判断是否为iphone
 * @param  {string}  [ua]   userAgent 字符串
 * @return {Boolean}
 */
function isIPhone(ua) {
  ua = ua || navigator.userAgent;
  return !!ua.match(/iphone/i);
}

/**
 * 判断是否为iphone
 * @param  {string}  [ua]   userAgent 字符串
 * @return {Boolean}
 */
function isIPad(ua) {
  ua = ua || navigator.userAgent;
  return !!ua.match(/ipad/i);
}

/**
 * 判断是否为jdApp内的WKWebview
 * @param  {string}  name webview 名称，支持名字 [ xview, wk ]
 * @param  {string}  [ua]   userAgent 字符串
 * @return {Boolean}
 */
function isWebview(name, ua) {
  ua = ua || navigator.userAgent;
  if (name === 'xview') return typeof window.XView !== 'undefined';
  if (name === 'wk') return !!ua.match(/supportjdshwk/i);
  return false;
}

/**
 * 返回网络类型
 * @param  {string}  [ua]   userAgent 字符串
 * @return {string}
 */
function getNetwork(ua) {
  ua = ua || navigator.userAgent;
  var re = /nettype\/([\S]*)/i;

  if (isApp('jd', ua)) re = /network\/([^;]*)/i;

  return re.test(ua) ? RegExp.$1.toLowerCase() : 'unknown';
}

/**
 * 获取 jd app 的 uuid
 * @param  {string}  [ua]   userAgent 字符串
 * @return {string}
 */
function getUUID(ua) {
  ua = ua || navigator.userAgent;
  if (!isApp('jd', ua)) return null;
  return ua.split(';')[4];
}

/**
 * 获取 app 版本信息
 * @param  {string}  appName app 名称，支持名字 [ wx, qq, jd ]
 * @param  {string}  [ua]   userAgent 字符串
 * @return {Boolean}
 */
function getAppVersion(appName, ua) {
  ua = ua || navigator.userAgent;

  if (appName === 'jd') return ua.split(';')[2] || null;
  if (appName === 'wx') return (/micromessenger\/([\S]*)/i.test(ua) ? RegExp.$1 : null
  );
  if (appName === 'qq') return (/qq\/([\S]*)/i.test(ua) ? RegExp.$1 : null
  );

  return null;
}

/**
 * 获取 android 版本号
 * @param {string} [ua] userAgent 字符串
 * @return {string}
 */
function getAndroidVersion(ua) {
  ua = ua || navigator.userAgent;
  var match = ua.match(/android\s([0-9\.]*)/i);
  return match ? match[1] : 'unknown';
}

/**
 * 获取 ios 版本号
 * @param {string} [ua] userAgent 字符串
 * @return {string}
 */
function getIOSVersion(ua) {
  ua = ua || navigator.userAgent;
  var match = ua.match(/OS ((\d+_?){2,3})\s/i);
  return match ? match[1].replace(/_/g, '.') : 'unknown';
}

/**
 * 转化版本为 version 对象
 * @param {string} v
 * @return {object}
 */
function version(v) {
	var ver = v.split('.');

	return {
		full: v,
		major: parseInt(ver[0], 10),
		minor: parseInt(ver[1], 10),
		patch: parseInt(ver[2], 10),
		build: ver[3] ? parseInt(ver[3], 10) : null
	};
}

/**
 * 版本号比较
 * @param  {String} a 版本号 a
 * @param  {String} b 版本后 b
 * @return {Number}   0: a == b， 1：a > b, -1: a < b
 */
function versionCompare(a, b) {
	if (a === b) return 0;

	a = a.split('.');
	b = b.split('.');

	var len = a.length - b.length;

	var pad = [];
	for (var _i = 0; _i < Math.abs(len); _i++) {
		pad.push(0);
	}

	if (len > 0) {
		b = b.concat(pad);
	} else if (len < 0) {
		a = a.concat(pad);
	}

	for (var i = 0; i < a.length; i++) {
		a[i] = parseInt(a[i], 10);
		b[i] = parseInt(b[i], 10);

		if (a[i] > b[i]) return 1;else if (a[i] < b[i]) return -1;
	}

	return 0;
}

var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('`assign` cannot be called with null or undefined');
	}
	return Object(val);
}

function assign() {
	for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		args[_key] = arguments[_key];
	}

	var from = void 0;
	var to = toObject(args[0]);
	var symbols = void 0;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (Object.getOwnPropertySymbols) {
			symbols = Object.getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
}

exports.getUrlQuery = getUrlQuery;
exports.serialize = serialize;
exports.isFunction = isFunction;
exports.isObject = isObject;
exports.isArray = isArray;
exports.isUndefined = isUndefined;
exports.isNull = isNull;
exports.isString = isString;
exports.isBoolean = isBoolean;
exports.isNumber = isNumber;
exports.isApp = isApp;
exports.isAndroid = isAndroid;
exports.isIOS = isIOS;
exports.isTablet = isTablet;
exports.isMobile = isMobile;
exports.isIPhone = isIPhone;
exports.isIPad = isIPad;
exports.isWebview = isWebview;
exports.getNetwork = getNetwork;
exports.getUUID = getUUID;
exports.getAppVersion = getAppVersion;
exports.getAndroidVersion = getAndroidVersion;
exports.getIOSVersion = getIOSVersion;
exports.version = version;
exports.versionCompare = versionCompare;
exports.assign = assign;

Object.defineProperty(exports, '__esModule', { value: true });

})));
