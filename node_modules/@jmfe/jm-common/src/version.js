/**
 * 转化版本为 version 对象
 * @param {string} v
 * @return {object}
 */
export function version(v) {
	const ver = v.split('.');

	return {
		full: v,
		major: parseInt(ver[0], 10),
		minor: parseInt(ver[1], 10),
		patch: parseInt(ver[2], 10),
		build: ver[3] ? parseInt(ver[3], 10) : null
	};
}

/**
 * 版本号比较
 * @param  {String} a 版本号 a
 * @param  {String} b 版本后 b
 * @return {Number}   0: a == b， 1：a > b, -1: a < b
 */
export function versionCompare(a, b) {
	if (a === b) return 0;

	a = a.split('.');
	b = b.split('.');

	const len = a.length - b.length;

	const pad = [];
	for (let i =0; i < Math.abs(len); i++) {
		pad.push(0);
	}

	if (len > 0) {
		b = b.concat(pad);
	} else if (len < 0) {
		a = a.concat(pad);
	}

	for (var i = 0; i < a.length; i++) {
		a[i] = parseInt(a[i], 10);
		b[i] = parseInt(b[i], 10);

		if (a[i] > b[i]) return 1;
		else if (a[i] < b[i]) return -1;
	}

	return 0;
}
