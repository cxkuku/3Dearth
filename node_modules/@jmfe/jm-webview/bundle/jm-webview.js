(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@jmfe/jm-common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@jmfe/jm-common'], factory) :
	(factory((global.jm = global.jm || {}, global.jm.webview = global.jm.webview || {}),global.jm.common));
}(this, (function (exports,_jmfe_jmCommon) { 'use strict';

function nativeCall(name, params) {
	var schema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'openApp.jdMobile';

	window.location.href = buildSchema(name, params, schema);
}

function buildSchema(name, params) {
	var schema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'openApp.jdMobile';

	return schema + '://' + name + '?params=' + encodeURIComponent(JSON.stringify(params));
}

/**
 * 获取产品详情 schema
 * @param {number} id
 * @param {object} [extra]
 * @return {string}
 */
function getProductSchema(id, extra) {
	return buildSchema('virtual', _jmfe_jmCommon.assign({
		category: 'jump',
		des: 'productDetail',
		skuId: id
	}, extra));
}

/**
 * 进入产品详情页
 * @param {number} id
 * @param {object} [extra]
 */
function toProduct(id, extra) {
	window.location.href = getProductSchema(id, extra);
}

/**
 * 获取店铺详情页 schema
 * @param {number} id
 * @param {object} [extra]
 * @return {string}
 */
function getShopSchema(id, extra) {
	return buildSchema('virtual', _jmfe_jmCommon.assign({
		category: 'jump',
		des: 'jshopMain',
		shopId: id
	}, extra));
}

/**
 * 进入店铺详情页
 * @param {number} id
 * @param {object} [extra]
 */
function toShop(id, extra) {
	window.location.href = getShopSchema(id, extra);
}

function getHomeSchema() {
	if (_jmfe_jmCommon.isAndroid()) return buildSchema('360buy', { type: 1 });else if (_jmfe_jmCommon.isIOS()) return buildSchema('virtual', { category: 'jump', des: 'HomePage' });
}

/**
 * 回到首页
 */
function toHome() {
	window.location.href = getHomeSchema();
}

function getCouponCenterSchema(extra) {
	return buildSchema('virtual', _jmfe_jmCommon.assign({
		category: 'jump',
		des: 'couponCenter'
	}, extra));
}

/**
 * 进入领券中心
 * @param {object} [extra]
 */
function toCouponCenter(extra) {
	window.location.href = getCouponCenterSchema(extra);
}

function getSecKillSchema(extra) {
	return buildSchema('virtual', _jmfe_jmCommon.assign({
		category: 'jump',
		des: 'seckill'
	}, extra));
}

/**
 * 进入秒杀频道
 * @param {object} [extra]
 */
function toSecKill(extra) {
	window.location.href = getSecKillSchema(extra);
}

function toFlashSale(extra) {
	console.warn('toFlashSale 已经改名为 toSecKill， 请使用新方法。');
	toSecKill(extra);
}

function getOrderListSchema(extra) {
	return buildSchema('virtual', _jmfe_jmCommon.assign({
		category: 'jump',
		des: 'orderlist'
	}, extra));
}

/**
 * 进入订单列表页
 * @param {number} id
 * @param {object} [extra]
 */
function toOrderList(extra) {
	window.location.href = getOrderListSchema(extra);
}

/**
 * 跳转到登录页
 * @param {string} [returnUrl]
 */
function toLogin(returnUrl) {
	returnUrl = returnUrl || window.location.href;
	var url = 'https://passport.m.jd.com/user/login.action';
	var params = {
		v: 1,
		returnurl: encodeURIComponent(returnUrl)
	};
	window.location.href = url + '?' + _jmfe_jmCommon.serialize(params);
}

/**
 * 打开新的 webview 展示页面
 * @param  {string} url
 */
function openNewWebView(url) {
	nativeCall('virtual', {
		category: 'jump',
		action: 'to',
		des: 'm',
		url: url
	});
}

function getDiscoverySchema(extra) {
	return buildSchema('virtual', _jmfe_jmCommon.assign({
		category: 'jump',
		des: 'Discovery'
	}, extra));
}

/**
 * 进入发现频道页
 * @param {object} [extra]
 */
function toDiscovery(extra) {
	window.location.href = getDiscoverySchema(extra);
}

function getArticleSchema(id, extra) {
	return buildSchema('virtual', _jmfe_jmCommon.assign({
		category: 'jump',
		des: 'faxian_article',
		id: id
	}, extra));
}

/**
 * 进入资讯详情页(发现文章)
 * @param {number} id
 * @param {object} [extra]
 */
function toArticle(id, extra) {
	window.location.href = getArticleSchema(id, extra);
}

function getAuthorSchema(id, extra) {
	return buildSchema('virtual', _jmfe_jmCommon.assign({
		category: 'jump',
		des: 'faxian_author',
		authorId: id
	}, extra));
}

/**
 * 进入发布者页
 * @param {number} id
 * @param {object} [extra]
 */
function toAuthor(id, extra) {
	window.location.href = getAuthorSchema(id, extra);
}

function getInventorySchema(extra) {
	return buildSchema('virtual', _jmfe_jmCommon.assign({
		category: 'jump',
		des: 'inventory'
	}, extra));
}

/**
 * 进入发现清单
 * @param {object} [extra]
 */
function toInventory(extra) {
	window.location.href = getInventorySchema(extra);
}

function getInventoryDetailSchema(id, extra) {
	return buildSchema('virtual', _jmfe_jmCommon.assign({
		category: 'jump',
		des: 'inventoryDetail',
		id: id
	}, extra));
}

/**
 * 进入发现清单商品详情
 * @param {number} id
 * @param {object} [extra]
 */
function toInventoryDetail(id, extra) {
	window.location.href = getInventoryDetailSchema(id, extra);
}

function getCartSchema(extra) {
	return buildSchema('virtual', _jmfe_jmCommon.assign({
		category: 'jump',
		des: 'cartB'
	}, extra));
}

/**
 * 进入购物车
 * @param {object} [extra]
 */
function toCart(extra) {
	window.location.href = getCartSchema(extra);
}

/**
 * 刷新购物车
 */
function refreshCart() {
	var version = _jmfe_jmCommon.getAppVersion('jd');

	if (_jmfe_jmCommon.versionCompare(version, '5.0.0') < 0) return;

	if (_jmfe_jmCommon.isAndroid()) {
		window.AndroidNavi && window.AndroidNavi.refreshCart();
	} else if (_jmfe_jmCommon.isIOS()) {
		nativeCall('communication', { action: 'sh_refreshCart' });
	}
}

/**
 * 显示导航栏购物车按钮
 */
function showCartButton() {
	var version = _jmfe_jmCommon.getAppVersion('jd');

	if (_jmfe_jmCommon.versionCompare(version, '5.0.0') < 0) return;

	if (_jmfe_jmCommon.isAndroid()) {
		window.AndroidNavi && window.AndroidNavi.setCart(JSON.stringify({ isShow: 'Y' }));
	} else if (_jmfe_jmCommon.isIOS()) {
		if (_jmfe_jmCommon.versionCompare(version, '5.1.0') < 0) {
			nativeCall('communication', { action: 'sh_showCart' });
		} else {
			window.MobileNavi && window.MobileNavi.configBtn(JSON.stringify({
				type: 'cart', //clear_js, search, cart, custom
				display: 'show', //show, hide
				position: 'outside', //outside, inside
				icon: '',
				title: '购物车',
				jump: ''
			}));
		}
	}
}

var position = {
	find: '0',
	seckill: '2'
};

function getLiveCastListSchema() {
	var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'find';

	var des = {
		find: 'FindLivePlayList',
		seckill: 'SecKillLivePlayList'
	};
	return buildSchema('virtual', {
		category: 'jump',
		des: des[type],
		position: position[type]
	});
}

/**
 * 跳转到直播列表页
 * @param  {String} type  直播类型： find（发现）, seckill（秒杀), 默认为 find
 */
function toLiveCastList() {
	var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'find';

	window.location.href = getLiveCastListSchema(type);
}

function getLiveCastPreviewSchema(id) {
	var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'find';

	var des = {
		find: 'FindLivePreDetail',
		seckill: 'SecKillLivePreDetail'
	};
	return buildSchema('virtual', {
		category: 'jump',
		des: des[type],
		id: id,
		position: position[type]
	});
}

/**
 * 跳转到直播预告页面
 * @param  {string} id    直播 ID
 * @param  {String} type  直播类型： find（发现）, seckill（秒杀), 默认为 find
 */
function toLiveCastPreview(id) {
	var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'find';

	window.location.href = getLiveCastPreviewSchema(id, type);
}

function getLiveCastRoomSchema(id) {
	var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'find';

	return buildSchema('virtual', {
		category: 'jump',
		des: 'LivePlayerRoom',
		id: id,
		position: position[type]
	});
}

/**
 * 跳转到直播间
 * @param  {string} id    直播间 ID
 * @param  {String} type  直播类型： find（发现）, seckill（秒杀), 默认为 find
 */
function toLiveCastRoom(id) {
	var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'find';

	window.location.href = getLiveCastRoomSchema(id, type);
}

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function scheme() {
	if (_jmfe_jmCommon.isMobile()) {
		return 'openapp.jdmobile';
	} else if (_jmfe_jmCommon.isTablet() && _jmfe_jmCommon.isIOS()) {
		return 'openapp.jdipad';
	}
}

var CONST = {
	WITH_CALLBACK: "Y", // 带回调
	WITHOUT_CALLBACK: "N", // 不带回调
	SHARE_ACTION_SET: "S", // 设置分享信息 setShareInfo
	SHARE_ACTION_PANE: "P", // 唤起分享面板 callSharePane
	SHARE_ACTION_OPEN: "O" // 直接分享到制定渠道  sendDirectShare
};

function androidOpenAppGte500(paramsObj) {
	nativeCall('communication', {
		des: 'share',
		type: 111,
		title: paramsObj.title,
		content: paramsObj.content,
		shareUrl: paramsObj.url,
		iconUrl: paramsObj.img,
		shareActionType: paramsObj.shareActionType,
		channel: paramsObj.channel,
		qrparam: paramsObj.qrparam,
		callback: paramsObj.callbackSwitcher,
		clickcallback: paramsObj.clickcallbackSwitcher
	});
}

function androidJsBridgeInitShare(paramsObj) {
	shareHelper.initShare(JSON.stringify({
		"title": paramsObj.title,
		"content": paramsObj.content,
		"shareUrl": decodeURIComponent(paramsObj.url),
		"iconUrl": decodeURIComponent(paramsObj.img),
		"shareActionType": paramsObj.shareActionType,
		"channel": paramsObj.channel,
		"qrparam": paramsObj.qrparam,
		"callback": paramsObj.callbackSwitcher,
		"clickcallback": paramsObj.clickcallbackSwitcher,
		"eventId": ""
	}));
}

function androidJsBridgeFiveParams(funcName, paramsObj) {
	shareHelper[funcName](paramsObj.title, paramsObj.content, decodeURIComponent(paramsObj.url), decodeURIComponent(paramsObj.img), paramsObj.callbackSwitcher);
}

function androidJsBridgeFourParams(funcName, paramsObj) {
	shareHelper[funcName](paramsObj.title, paramsObj.content, decodeURIComponent(paramsObj.url), decodeURIComponent(paramsObj.img));
}

function iphoneOpenAppLt500(paramsObj, actionType) {
	nativeCall('communication', {
		action: actionType,
		title: paramsObj.title,
		content: paramsObj.content,
		shareUrl: paramsObj.url,
		iconUrl: paramsObj.img,
		isCallBack: paramsObj.callbackSwitcher
	});
}

function iphoneIpadOpenAppGte500(paramsObj) {
	var jsonObj = {
		category: "jump",
		des: "share",
		type: "111",
		title: paramsObj.title,
		content: paramsObj.content,
		shareUrl: paramsObj.url,
		//分享的图片url，自定义， V 5.0 之前，使用该字段下发分享icon url
		imageUrl: paramsObj.img,
		//分享的图片url，自定义，V 5.0 之后，使用该字段下发分享 icon url
		iconUrl: paramsObj.img,
		qrparam: paramsObj.qrparam,
		channel: paramsObj.channel,
		isCallBack: paramsObj.callbackSwitcher,
		clickcallback: paramsObj.clickcallbackSwitcher,
		shareActionType: paramsObj.shareActionType
	};
	nativeCall('virtual', jsonObj, scheme());
}

/**
 * 自定义异常构造函数
 * @param message
 * @constructor
 */

var JdShareException = function (_Error) {
	_inherits(JdShareException, _Error);

	function JdShareException(message) {
		_classCallCheck(this, JdShareException);

		var _this = _possibleConstructorReturn(this, (JdShareException.__proto__ || Object.getPrototypeOf(JdShareException)).call(this));

		_this.message = message;
		_this.name = 'JdShareException';
		return _this;
	}

	_createClass(JdShareException, [{
		key: 'toString',
		value: function toString() {
			return this.name + ': ' + this.message;
		}
	}]);

	return JdShareException;
}(Error);

/**
 * 拼接查询字符串
 * @param url
 * @param query
 * @returns {*}
 */


function appendQuery(url, query) {
	if (query == '') return url;
	return (url + '&' + query).replace(/[&?]{1,2}/, '?');
}

/**
 * 配置回调函数
 * @param callback
 */
function makeShareResultCallback(o) {
	window.jdappShareRes = function (result) {
		// let temp;
		// IOS 在 4.4 最初实现回调的时候，就把 shareChannel 与 shareResult 弄反了，并且 shareChannel 是数值
		// 此 bug 在 4.4.1 版本中会被修复，以与 andriod 版本保持统一
		/*if (result.shareChannel && typeof result.shareChannel === 'number') {
   temp = result.shareChannel;
   result.shareChannel = (result.shareResult).toString();
   result.shareResult = temp;
   }*/
		// 有这个字段为 callback 没有则为 clickcallback
		if (result.hasOwnProperty('shareResult')) {
			o.callback && o.callback(result);
		} else {
			o.clickcallback && o.clickcallback(result);
		}
	};
}

/**
 * 将配置中的channel字段，转成相应的iphone版本字段
 * @param inputChannels
 */
function processingChannel(inputChannels) {
	var androidShareChannel2IPhoneMap = {
		Wxfriends: "WeChat_Friend",
		Wxmoments: "WeChat_FriendTimeline",
		Sinaweibo: "Weibo",
		QQfriends: "QQFriend_SHARE_CLIENT",
		QQzone: "QQZone_SHARE_CLIENT",
		Moreshare: ""
	};
	var convertedChannelStr = '';

	if (inputChannels) {
		if (_jmfe_jmCommon.isIOS()) {
			// 仅仅在 4.4 以后，至5.0以前的 iphone版本中需要转换，否则不需转换；且channel仅支持单个渠道或者为"" 空字符串
			// 5.0以后才支持channel字段用逗号分隔多个参数
			// 5.0之后与安卓统一了输入参数，无需转换// 写此代码时，公司已经不为4.2以下App服务了
			var appVer = _jmfe_jmCommon.getAppVersion('jd');

			if (_jmfe_jmCommon.isMobile() && _jmfe_jmCommon.isApp('jd') && _jmfe_jmCommon.versionCompare(appVer, '4.4.0') >= 0 && _jmfe_jmCommon.versionCompare(appVer, '5.0.0') < 0) {
				convertedChannelStr = androidShareChannel2IPhoneMap[inputChannels];
				if (convertedChannelStr) {
					return convertedChannelStr;
				} else {
					throw new JdShareException("输入的channel参数在iphone版本中不存在");
				}
			} else {
				return inputChannels;
			}
		} else {
			return inputChannels;
		}
	} else {
		// 用户值传给客户端，客户端已做处理；
		// 不做处理的原因是，我认为客户端的实现有问题，就要让它暴露出来，调用者才知道，客户端开发才知道
		// JdShare 是用户分享设置信息传递者，不在中间加入一层，不对用户的设置做操作、容错等；
		return inputChannels;
	}
}

/**
 * 判断用户是否设置了每个配置项，如果没有任何一项没有设置，返回 false
 * @param inputParamObj
 * @returns {boolean}
 */
function isInputParamObjLegal(inputParamObj) {
	return ['title', 'content', 'url', 'img'].every(function (key) {
		return inputParamObj[key] !== undefined;
	});
}

/**
 * 集中处理用户输入的配置参数
 * @param inputParamObj
 */
function processingInputParam(inputParamObj) {
	if (isInputParamObjLegal(inputParamObj)) {
		var targetParamObj = {
			channel: '',
			qrparam: null,
			callback: null,
			clickcallback: null
		};
		var hasCallbackFunc = void 0;
		var callbackSwitcher = void 0;
		var hasClickCallbackFunc = void 0;
		var clickcallbackSwitcher = void 0;

		try {
			if (Object.prototype.toString.call(inputParamObj) === "[object Object]") {
				_jmfe_jmCommon.assign(targetParamObj, inputParamObj);
			}
			// 处理回调
			hasCallbackFunc = typeof targetParamObj.callback === 'function';
			hasClickCallbackFunc = typeof targetParamObj.clickcallback === 'function';
			if (hasCallbackFunc) {
				callbackSwitcher = CONST.WITH_CALLBACK;
			} else {
				callbackSwitcher = CONST.WITHOUT_CALLBACK;
			}

			if (hasClickCallbackFunc) {
				clickcallbackSwitcher = CONST.WITH_CALLBACK;
			} else {
				clickcallbackSwitcher = CONST.WITHOUT_CALLBACK;
			}

			if (hasCallbackFunc && hasClickCallbackFunc) {
				// 2个回调都设置了 传入2个回调函数
				makeShareResultCallback({
					callback: targetParamObj.callback,
					clickcallback: targetParamObj.clickcallback
				});
			} else if (hasCallbackFunc) {
				makeShareResultCallback({
					callback: targetParamObj.callback
				});
			} else if (hasClickCallbackFunc) {
				makeShareResultCallback({
					clickcallback: targetParamObj.clickcallback
				});
			}

			// 二维码分享配置
			if (Object.prototype.toString.call(targetParamObj.qrparam) === "[object Object]") {
				targetParamObj.qrparam.top_pic = targetParamObj.qrparam.top_pic ? encodeURIComponent(decodeURIComponent(targetParamObj.qrparam.top_pic)) : '';
				targetParamObj.qrparam.mid_pic = targetParamObj.qrparam.mid_pic ? encodeURIComponent(decodeURIComponent(targetParamObj.qrparam.mid_pic)) : '';
			}

			// 是否需要回调的控制字段添加到 targetParamObj 对象中；
			targetParamObj.callbackSwitcher = callbackSwitcher;
			targetParamObj.clickcallbackSwitcher = clickcallbackSwitcher;

			// 分享出去的地址自动加时间戳
			targetParamObj.url = appendQuery(targetParamObj.url, "_ts=" + new Date().getTime());
			// 统一处理 channel 字段
			targetParamObj.channel = processingChannel(targetParamObj.channel);
			// 编码url
			targetParamObj.url = encodeURIComponent(targetParamObj.url);
			targetParamObj.img = encodeURIComponent(targetParamObj.img);
		} catch (e) {
			throw e;
		}
		return targetParamObj;
	} else {
		throw new JdShareException("调用方法时传入配置对象格式错误，请查看文档");
	}
}

/**
 *作用：下发分享设置
 *版本：jdApp4.4.0以上版本支持，低于 jdApp4.4.0的部分版本可能支持(具体不详，但 2015年12月25日，Android 平台 V＜4.1，IPhone 平台 V＜4.3 已经强制升级)
 *jdApp 内表现：预期在屏幕右上角出现分享按钮
 *jdApp 外表现：该功能不可用；执行该函数没有反应
 * @param params
 */
function setShareInfo(params) {
	// 仅在 jdApp 内执行
	if (!_jmfe_jmCommon.isApp('jd')) return;

	try {
		var paramsObj = null;
		var link = "";
		var jsonObj = null;

		// 保存各种配置信息
		paramsObj = processingInputParam(params);
		paramsObj.shareActionType = CONST.SHARE_ACTION_SET;

		if (_jmfe_jmCommon.isAndroid()) {
			// 仅当 shareHelper对象存在时才能下发分享配置，更老版本不支持；未来如果该对象删除了也不出错
			if (window.shareHelper) {
				// jdApp 5.0版本新增方法
				if (typeof shareHelper.initShare === 'function') {
					//channel 参数可设置，配置后，分享面板仅出现配置过的项目; 如果为空，则显示默认全部
					androidJsBridgeInitShare(paramsObj);
				} else if (typeof shareHelper.setShareInfoCallback === 'function') {
					if (paramsObj.callbackSwitcher === CONST.WITH_CALLBACK) {
						try {
							//根据needCallBack 以及 window.jdappShareRes 函数，决定是否需要回调；
							//jdApp V4.4版本通过开关控制; jdApp V4.4之前，setShareInfoCallback 会忽略 "Y/N" 参数，默认就是添加回调的
							androidJsBridgeFiveParams('setShareInfoCallback', paramsObj);
						} catch (e) {
							//jdApp V4.4 之前版本，如果已经有setShareInfoCallback函数，但参数是4个的话，上面代码会出错 //jdApp V4.4版本通过开关控制//jdApp V4.4之前，setShareInfoCallback 会忽略 "Y/N" 参数，默认就是添加回调的
							androidJsBridgeFourParams('setShareInfoCallback', paramsObj);
						}
					} else {
						try {
							// 关掉
							androidJsBridgeFiveParams('setShareInfoCallback', paramsObj);
						} catch (e) {
							if (typeof shareHelper.setShareInfo === 'function') {
								androidJsBridgeFourParams('setShareInfo', paramsObj);
							}
						}
					}
					//如果不存在setShareInfoCallback，则调用setShareInfo，其能否回调实现是不确定的，依赖于CMS配置等，Android客户端那边有个回调全局开关，如果开关被别的配置或者代码打开了，那么就有回调，否则就没有回调。
				} else if (typeof shareHelper.setShareInfo === 'function') {
					androidJsBridgeFourParams('setShareInfo', paramsObj);
				}
			} else {
				//在没有 shareHelper 对象时，有可能是4.4以下版本，也可能是5.0以上版本，例如5.1的XVIEW中也不存在 shareHelper 对象
				//使用 openApp 协议，不支持回调 // jdApp5.0 可以支持自定义分享面板； // jdApp V4.4支持channel，// 更老版本会忽略shareActionType参数 与 channel 参数，弹出分享面板，保证至少能用
				androidOpenAppGte500(paramsObj);
			}
		} else if (_jmfe_jmCommon.isIOS()) {
			// jdApp 5.0及以上版本
			var appVer = _jmfe_jmCommon.getAppVersion('jd');
			if (_jmfe_jmCommon.isIPhone() && _jmfe_jmCommon.versionCompare(appVer, '5.0.0') >= 0 || _jmfe_jmCommon.isIpad() && _jmfe_jmCommon.versionCompare(appVer, '3.6.0') >= 0) {
				iphoneIpadOpenAppGte500(paramsObj);
			} else if (_jmfe_jmCommon.isIPhone()) {
				// 包括 jdApp5.0以下，以及非 jdApp
				iphoneOpenAppLt500(paramsObj, "syncShareData");
			}
		}
	} catch (e) {
		throw e;
	}
}
/**
 * 作用：唤起分享面板
 版本：
 * jdApp 5.0 支持唤起自定义面板
 * jdApp 4.4.0 加入唤起分享面板方法
 * jdApp 4.4.0 之前的某些版本 (具体不详，但 2015年12月25日，Android 平台 V＜4.1，IPhone 平台 V＜4.3 已经强制升级)，能够唤起默认分享面板
 表现：出现自定义配置的分享面板 / 或者唤起默认分享面板
 * @param params
 */
function callSharePane(params) {
	try {
		var link = void 0;
		var shareParam = void 0;
		var jsonObj = null;
		var paramsObj = null;

		// 保存各种配置信息
		paramsObj = processingInputParam(params);
		paramsObj.shareActionType = CONST.SHARE_ACTION_PANE;

		if (_jmfe_jmCommon.isAndroid()) {
			//在 jdApp 内，调用各种方法
			if (_jmfe_jmCommon.isApp('jd')) {
				if (window.shareHelper) {
					// jdApp 5.0 新增方法;// 回调函数也是 5.0 新增，5.0以下不支持
					if (typeof shareHelper.initShare === "function") {
						androidJsBridgeInitShare(paramsObj);
						//如果存在 callShare,那么看它是否需要回调，否则使用 openApp 协议，不支持回调
					} else if (typeof shareHelper.callShare === "function") {
						//最后一个参数是 jdAppV4.4才新增的，老版本的jdApp不能识别，则会直接忽略掉此参数
						androidJsBridgeFiveParams('callShare', paramsObj);
					} else {
						// jdApp4.4.0以下老版本//使用 openApp 协议，不支持回调
						androidOpenAppGte500(paramsObj);
					}
				} else {
					//在没有 shareHelper 对象时，有可能是4.4以下版本，也可能是5.0以上版本，例如5.1的XVIEW中也不存在 shareHelper 对象
					//使用 openApp 协议，不支持回调// jdApp5.0 可以支持自定义分享面板；// jdApp V4.4支持channel，// 更老版本会忽略shareActionType参数 与 channel 参数，弹出分享面板，保证至少能用
					androidOpenAppGte500(paramsObj);
				}
			} else {
				//在jdApp外使用时//使用 openApp 协议，不支持回调 // jdApp5.0 可以支持自定义分享面板；// jdApp V4.4支持channel，// 更老版本会忽略shareActionType参数 与 channel 参数，弹出分享面板，保证至少能用
				androidOpenAppGte500(paramsObj);
			}
		} else if (_jmfe_jmCommon.isIOS()) {
			// jdApp5.0及以上
			var appVer = _jmfe_jmCommon.getAppVersion('jd');
			if (_jmfe_jmCommon.isIPhone() && _jmfe_jmCommon.versionCompare(appVer, '5.0.0') >= 0 || _jmfe_jmCommon.isIpad() && _jmfe_jmCommon.versionCompare(appVer, '3.6.0') >= 0) {
				iphoneIpadOpenAppGte500(paramsObj);
			} else if (_jmfe_jmCommon.isIPhone()) {
				// 包括 jdApp5.0以下，以及非 jdApp
				iphoneOpenAppLt500(paramsObj, "share");
			}
		}
	} catch (e) {
		throw e;
	}
}
/**
 *作用：直接分享到某个渠道
 版本：jdApp4.4.0以上版本支持，低于 jdApp4.4.0的部分版本可能支持(具体不详，但 2015年12月25日，Android 平台 V＜4.1，IPhone 平台 V＜4.3 已经强制升级)
 表现：直接唤起相应渠道APP的分享设置界面
 * @param params
 */
function sendDirectShare(params) {
	try {
		var link = void 0;
		var shareParam = void 0;
		var jsonObj = null;
		var paramsObj = null;

		// 保存各种配置信息
		paramsObj = processingInputParam(params);
		paramsObj.shareActionType = CONST.SHARE_ACTION_OPEN;

		if (_jmfe_jmCommon.isAndroid()) {
			//在 jdApp 内，调用各种方法
			if (_jmfe_jmCommon.isApp('jd')) {
				if (window.shareHelper) {
					// jdApp 5.0 新增方法;// 回调函数也是 5.0 新增，5.0以下不支持// 如果有 sendShare则调用，否则使用 openApp 协议
					if (typeof shareHelper.initShare === "function") {
						androidJsBridgeInitShare(paramsObj);
					} else if (typeof shareHelper.sendShare === "function") {
						//jdApp 4.4版本，支持回调
						shareHelper.sendShare(paramsObj.title, paramsObj.content, decodeURIComponent(paramsObj.url), decodeURIComponent(paramsObj.img), paramsObj.channel, paramsObj.callbackSwitcher);
					} else {
						//使用 openApp 协议, jdApp V4.4支持channel，更老版本会忽略此参数 channel 参数，弹出分享面板，保证至少能用
						androidOpenAppGte500(paramsObj);
					}
				} else {
					//在没有 shareHelper 对象时，有可能是4.4以下版本，也可能是5.0以上版本，例如5.1的XVIEW中也不存在 shareHelper 对象//使用 openApp 协议，不支持回调 // jdApp5.0 可以支持自定义分享面板； // jdApp V4.4支持channel， // 更老版本会忽略shareActionType参数 与 channel 参数，弹出分享面板，保证至少能用
					androidOpenAppGte500(paramsObj);
				}
			} else {
				//在jdApp外使用时//使用 openApp 协议，不支持回调 // jdApp5.0 可以支持自定义分享面板；// jdApp V4.4支持channel，// 更老版本会忽略shareActionType参数 与 channel 参数，弹出分享面板，保证至少能用
				androidOpenAppGte500(paramsObj);
			}
		} else if (_jmfe_jmCommon.isIOS()) {
			//有直接分享的渠道设置
			if (paramsObj.channel) {
				var appVer = _jmfe_jmCommon.getAppVersion('jd');
				if (_jmfe_jmCommon.isIPhone() && _jmfe_jmCommon.versionCompare(appVer, '5.0.0') >= 0 || _jmfe_jmCommon.isIpad() && _jmfe_jmCommon.versionCompare(appVer, '3.6.0') >= 0) {
					iphoneIpadOpenAppGte500(paramsObj);
				} else if (_jmfe_jmCommon.isIPhone()) {
					// 包括 jdApp5.0以下，以及非 jdApp
					nativeCall('virtual', {
						category: 'jump',
						des: 'share',
						type: 111,
						title: paramsObj.title,
						content: paramsObj.content,
						shareUrl: paramsObj.url,
						imageUrl: paramsObj.img,
						channel: paramsObj.channel,
						isCallBack: paramsObj.callbackSwitcher
					});
				}
			} else {
				throw new JdShareException("分享渠道未设置");
			}
		}
	} catch (e) {
		throw e;
	}
}

/**
 * iOS App 文档
 * http://cf.jd.com/pages/viewpage.action?pageId=85830303
 */

/**
 * 设置webview导航背景色
 * 
 * @export
 * @param {Object} params
 * @param {string} params.naviIcon - icon颜色类型 '1'代表灰色导航栏图标（也即默认值，适用于浅色背景），'2'代表白色导航栏图标，适用于深色背景
 * @param {string} params.backgroundColor - 背景颜色, e.g.'#3a3a3a'
 * @param {string} params.pic - 背景图片url 'https://m.360buyimg.com/babel/jfs/t4036/283/2146564148/19349/f7389255/58a4184aNdb067a60.jpg'
 */
function setNaviBackground(params) {
	var version = _jmfe_jmCommon.getAppVersion('jd');
	if (!_jmfe_jmCommon.isApp('jd') || _jmfe_jmCommon.versionCompare(version, '6.0.0') < 0) return;
	if (_jmfe_jmCommon.isWebview('wk')) {
		window.webkit.messageHandlers.MobileNavi.postMessage({
			'method': 'setNaviBackground',
			'params': JSON.stringify(params),
			'callBackName': null,
			'callBackId': null
		});
	} else {
		window.MobileNavi && MobileNavi.setNaviBackground(JSON.stringify(params));
	}
}

/**
 * 清除导航上按钮的配置，归位默认设置，在调用配置方法前使用。
 * 
 */
function configBtnClear() {
	var version = _jmfe_jmCommon.getAppVersion('jd');
	var params = {
		type: 'clear_js',
		display: '',
		position: '',
		icon: '',
		title: '',
		jump: ''
	};
	console.log({
		'method': 'configBtnSince610',
		'params': JSON.stringify({
			clear_js: params
		}),
		'callBackName': null,
		'callBackId': null
	});

	if (!_jmfe_jmCommon.isApp('jd')) return;
	if (_jmfe_jmCommon.isWebview('wk')) {
		window.webkit.messageHandlers.MobileNavi.postMessage({
			method: 'configBtnSince610',
			params: JSON.stringify({
				clear_js: params
			}),
			callBackName: null,
			callBackId: null
		});
	} else {
		if (_jmfe_jmCommon.versionCompare(version, '6.1.0') < 0) {
			window.MobileNavi && MobileNavi.configBtn(JSON.stringify(params));
		} else {
			window.MobileNavi && MobileNavi.configBtnSince610(JSON.stringify({
				clear_js: params
			}));
		}
	}
}

/**
 * 5.1自定义导航栏按钮
 * 
 * @param {Object} options 
 */
function configBtnSet(options) {
	var defaults = {
		type: '',
		display: '',
		position: '',
		icon: '',
		title: '',
		jump: ''
	};
	var type_arr = ['homepage', 'search', 'calendar', 'cart', 'message', 'custom'];

	if (!_jmfe_jmCommon.isObject(options)) return;
	if (!_jmfe_jmCommon.isApp('jd')) return;
	var params = _jmfe_jmCommon.assign(defaults, options);
	for (var i = 0; i < type_arr.length; i++) {
		if (params.type === type_arr[i]) {
			if (_jmfe_jmCommon.isWebview('wk')) {
				window.webkit.messageHandlers.MobileNavi.postMessage({
					'method': 'configBtn',
					'params': JSON.stringify(params),
					'callBackName': null,
					'callBackId': null
				});
			} else {
				window.MobileNavi && MobileNavi.configBtn(JSON.stringify(params));
			}
		}
	}
}

/**
 * 6.1自定义导航栏按钮
 * 
 * @param {Object} options 
 */
function configBtnSince610(options) {
	var flag = '';
	var type_arr = ['homepage', 'search', 'calendar', 'cart', 'message', 'custom'];
	var _params = {};
	if (!_jmfe_jmCommon.isObject(options)) return;
	if (!_jmfe_jmCommon.isApp('jd')) return;

	for (var key in options) {
		flag = true;
		if (_jmfe_jmCommon.isObject(options[key])) {
			for (var i = 0; i < type_arr.length; i++) {
				if (options[key].type === type_arr[i]) {
					flag = false;
					break;
				}
			}
			if (!flag) {
				_params[key] = options[key];
				_params[key].display = options[key].display || '';
				_params[key].icon = options[key].icon || '';
				_params[key].jump = options[key].jump || '';
				_params[key].position = options[key].position || '';
				_params[key].title = options[key].title || '';
			}
		} else if (_jmfe_jmCommon.isArray(options[key])) {
			_params[key] = options[key];
			if (_params[key].length < 3) {
				flag = false;
				break;
			}
		} else {
			throw new Error('调用方法时传入配置对象格式错误');
		}
	}
	if (!flag) {
		if (_jmfe_jmCommon.isWebview('wk')) {
			window.webkit.messageHandlers.MobileNavi.postMessage({
				'method': 'configBtnSince610',
				'params': JSON.stringify(_params),
				'callBackName': null,
				'callBackId': null
			});
		} else {
			window.MobileNavi && window.MobileNavi.configBtnSince610(JSON.stringify(_params));
		}
	}
}

/**
 * 显示Webview左上角关闭按钮及逻辑
 * 
 */
function showCloseBtn() {
	if (!_jmfe_jmCommon.isApp('jd')) return;
	if (_jmfe_jmCommon.isWebview('wk')) {
		window.webkit.messageHandlers.MobileNavi.postMessage({
			'method': 'showCloseBtn'
		});
	} else {
		window.MobileNavi && MobileNavi.showCloseBtn();
	}
}

/**
 * 设置透明导航栏
 * 
 * @param {Object} options 
 * @param {string} options.blackImg - 图片url https开头，与黑色icon对应
 * @param {string} options.whiteImg - 图片url https开头，与白色icon对应
 */
function enableTransparent(options) {
	var _params = {
		blackImg: '',
		whiteImg: ''
	};
	if (!_jmfe_jmCommon.isApp('jd') || !_jmfe_jmCommon.isObject(options)) return;
	_jmfe_jmCommon.assign(_params, options);
	if (_jmfe_jmCommon.isWebview('wk')) {
		window.webkit.messageHandlers.MobileNavi.postMessage({
			'method': 'enableTransparent',
			'params': JSON.stringify(_params),
			'callBackName': null,
			'callBackId': null
		});
	} else {
		window.MobileNavi && MobileNavi.enableTransparent(JSON.stringify(_params));
	}
}

/**
 * 改变webview导航栏文字标题
 * 
 * @param {string} title - 标题文案
 */
function setTitle(title) {
	if (!_jmfe_jmCommon.isApp('jd') || !_jmfe_jmCommon.isString(title)) return;
	if (_jmfe_jmCommon.isWebview('wk')) {
		window.webkit.messageHandlers.MobileNavi.postMessage({
			'method': 'setTitle',
			'params': title,
			'callBackName': null,
			'callBackId': null
		});
	} else {
		window.MobileNavi && MobileNavi.setTitle(title);
	}
}

/**
 * 打开扫啊扫
 * 
 * @param {string} callbackName 
 */
function showNativeBarcodeScan(callbackName) {
	if (!_jmfe_jmCommon.isApp('jd') || !_jmfe_jmCommon.isString(callbackName)) return;
	if (_jmfe_jmCommon.isWebview('wk')) {
		window.webkit.messageHandlers.MobileNavi.postMessage({
			'method': 'showNativeBarcodeScan',
			'params': callbackName,
			'callBackName': null,
			'callBackId': null
		});
	} else {
		window.MobileNavi && MobileNavi.showNativeBarcodeScan(callbackName);
	}
}

/**
 * 多种相片上传
 * 
 */
function showNativeUpload() {
	if (!_jmfe_jmCommon.isApp('jd')) return;
	if (_jmfe_jmCommon.isWebview('wk')) {
		window.webkit.messageHandlers.MobileNavi.postMessage({
			'method': 'showNativeUpload'
		});
	} else {
		window.MobileNavi && MobileNavi.showNativeUpload();
	}
}

/**
 * iOS App 文档
 * http://cf.jd.com/pages/viewpage.action?pageId=85830303
 */

/**
 * 关闭XView
 * 
 */
function XViewClose() {
	if (!_jmfe_jmCommon.isWebview('xview')) return;
	if (_jmfe_jmCommon.isWebview('wk')) {
		window.webkit.messageHandlers.XView.postMessage({
			"method": "close"
		});
	} else {
		window.XView && window.XView.close();
	}
}

/**
 * 定制Xview默认关闭按钮
 * 
 * @param {number} [closePositionX=''] - 关闭按钮x坐标 0<=x<=1
 * @param {number} [closePositionY=''] - 关闭按钮y坐标 0<=x<=1
 * @param {string} [closeIcon=''] - 关闭按钮图片url，可选
 * @returns 
 */
function XViewConfigCloseButton() {
	var closePositionX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	var closePositionY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	var closeIcon = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

	if (!_jmfe_jmCommon.isWebview('xview')) return;
	if (_jmfe_jmCommon.isWebview('wk')) {
		window.webkit.messageHandlers.XView.postMessage({
			"method": "configCloseButton",
			"params": {
				"closeIcon": closeIcon,
				"x": closePositionX,
				"y": closePositionY
			},
			"callBackName": null,
			"callBackId": null
		});
	} else {
		window.XView && XView.configCloseButton(closeIcon, closePositionX, closePositionY);
	}
}

/**
 * iOS App 文档
 * http://cf.jd.com/pages/viewpage.action?pageId=85830303
 */

/**
 * 京东支付
 * 
 * @param {string} [pin=''] 
 * @param {string} [code=''] 
 * @param {string} [mode=''] 
 * @returns 
 */
function JDPaySdk_pay() {
	var pin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	var code = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

	if (!_jmfe_jmCommon.isApp('jd')) return;
	if (_jmfe_jmCommon.isWebview('wk')) {
		window.webkit.messageHandlers.JDPaySdk.postMessage({
			'method': 'jdpaysdk_pay',
			'params': {
				'pin': pin,
				'code': code,
				'mode': mode
			},
			'callBackName': null,
			'callBackId': null
		});
	} else {
		window.JDPaySdk && JDPaySdk.jdpaysdk_pay(pin, code, mode);
	}
}

/**
 * 关闭京东支付
 */
function JDPaySdk_pop() {
	if (!_jmfe_jmCommon.isApp('jd')) return;
	if (_jmfe_jmCommon.isWebview('wk')) {
		window.webkit.messageHandlers.JDPaySdk.postMessage({
			'method': 'jdpaysdk_pop'
		});
	} else {
		window.JDPaySdk && JDPaySdk.jdpaysdk_pop();
	}
}

/**
 * iOS App 文档
 * http://cf.jd.com/pages/viewpage.action?pageId=85830303
 */

/**
 * H5图片下载及指定目录保存
 * 
 * @param {string} [imgUrl=''] - 图片url
 * @param {string} [callBackName=''] - 全局回调函数名
 * @param {string} [callBackId=''] -  由H5自己生成的一个标示性字符串，这个是为了同时下载多张图片时h5进行区分，通过回调函数的参数返回给H5
 */
function saveImageToPhoteAlbum() {
	var imgUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	var callBackName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	var callBackId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

	if (!_jmfe_jmCommon.isApp('jd')) return;
	var params = { imgUrl: imgUrl, callBackName: callBackName, callBackId: callBackId };
	try {
		if (_jmfe_jmCommon.isWebview('wk')) {
			window.webkit.messageHandlers.JDAppUnite.postMessage({
				'method': 'saveImageToPhoteAlbum',
				'params': JSON.stringify(params),
				'callBackName': null,
				'callBackId': null
			});
		} else {
			window.JDAppUnite && JDAppUnite.saveImageToPhoteAlbum(JSON.stringify(params));
		}
	} catch (err) {
		throw new Error(err);
	}
}

/**
 * 微信QQ授权登录
 * 
 * @param {string} [channelName='']
 * @param {string} [callBackName='']
 */
function bindSocialAccountWithJsonString() {
	var channelName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	var callBackName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

	if (!_jmfe_jmCommon.isApp('jd')) return;
	var params = { channelName: channelName, callBackName: callBackName };
	try {
		if (_jmfe_jmCommon.isWebview('wk')) {
			window.webkit.messageHandlers.MobileLogin.postMessage({
				'method': 'bindSocialAccountWithJsonString',
				'params': JSON.stringify(params),
				'callBackName': null,
				'callBackId': null
			});
		} else {
			window.MobileLogin && MobileLogin.bindSocialAccountWithJsonString(JSON.stringify(params));
		}
	} catch (err) {
		throw new Error(err);
	}
}

/**
 * 选择或者拍摄一张图片，返回这张图片的线上url路径
 * 回调函数名 cameraCallBack  
 * 回调函数参数  e.g. jfs/t5830/165/7329426657/41247/1a8a1fcf/596f1a11N0b4984e2.jpg.webp  
 * 
 */
function selectImage() {
	if (!_jmfe_jmCommon.isApp('jd')) return;
	if (_jmfe_jmCommon.isIOS()) {
		window.location.href = 'objc:callCamera';
	} else if (_jmfe_jmCommon.isAndroid()) {
		window.JDClient && window.JDClient.openCamera();
	}
}

/**
 * app内关闭直播小窗
 */
function closeLivesWindow() {
	if (!_jmfe_jmCommon.isApp('jd')) return;
	try {
		if (_jmfe_jmCommon.isWebview('wk')) {
			window.webkit.messageHandlers.JDAppUnite.postMessage({
				'method': 'closeLiveSWindow'
			});
		} else {
			window.JDAppUnite && JDAppUnite.closeLiveSWindow();
		}
	} catch (err) {
		throw new Error(err);
	}
}

/**
 * 微信签约---app内打开微信并跳到指定页面--测试
 */
function goWxUrl(url) {
	if (!_jmfe_jmCommon.isApp('jd')) return;
	try {
		if (_jmfe_jmCommon.isWebview('wk')) {
			window.webkit.messageHandlers.JDAppUnite.postMessage({
				'method': 'signWeixinPay',
				'params': url
			});
		} else {
			window.JDAppUnite && JDAppUnite.signWeixinPay(url);
		}
	} catch (err) {
		throw new Error(err);
	}
}

/**
 * 获取设备指纹
 */
function getFingerInfo(cbkFunc) {
	if (!_jmfe_jmCommon.isApp('jd')) return;
	if (typeof cbkFunc != "string") throw new Error("cbkFunc need string");
	try {
		if (_jmfe_jmCommon.isWebview('wk')) {
			window.webkit.messageHandlers.JDAppUnite.postMessage({
				'method': 'getFingerInfo',
				'params': cbkFunc
			});
		} else {
			window.JDAppUnite && JDAppUnite.getFingerInfo(cbkFunc);
		}
	} catch (err) {
		throw new Error(err);
	}
}

/**
 * 获取app导航栏高度
 */
function getNavHeight(cbkFunc) {
	if (!_jmfe_jmCommon.isApp('jd')) return;
	if (typeof cbkFunc != "string") throw new Error("cbkFunc need string");
	try {
		if (_jmfe_jmCommon.isWebview('wk')) {
			window.webkit.messageHandlers.MobileNavi.postMessage({
				'method': 'getNaviHeight',
				'params': cbkFunc
			});
		} else {
			window.MobileNavi && MobileNavi.getNaviHeight(cbkFunc);
		}
	} catch (err) {
		throw new Error(err);
	}
}

/**
 * webview首屏加载状态协议
 */

function sourceIsReady() {
	if (!_jmfe_jmCommon.isApp('jd')) return;
	try {
		if (_jmfe_jmCommon.isWebview('wk')) {
			window.webkit.messageHandlers.JDAppUnite.postMessage({
				'method': 'sourceIsReady',
				'params': '1'
			});
		} else {
			window.JDAppUnite && window.JDAppUnite.sourceIsReady('1');
		}
	} catch (err) {
		throw new Error(err);
	}
}

exports.nativeCall = nativeCall;
exports.buildSchema = buildSchema;
exports.getProductSchema = getProductSchema;
exports.toProduct = toProduct;
exports.getShopSchema = getShopSchema;
exports.toShop = toShop;
exports.getHomeSchema = getHomeSchema;
exports.toHome = toHome;
exports.getCouponCenterSchema = getCouponCenterSchema;
exports.toCouponCenter = toCouponCenter;
exports.getSecKillSchema = getSecKillSchema;
exports.toSecKill = toSecKill;
exports.toFlashSale = toFlashSale;
exports.getOrderListSchema = getOrderListSchema;
exports.toOrderList = toOrderList;
exports.toLogin = toLogin;
exports.openNewWebView = openNewWebView;
exports.getDiscoverySchema = getDiscoverySchema;
exports.toDiscovery = toDiscovery;
exports.getArticleSchema = getArticleSchema;
exports.toArticle = toArticle;
exports.getAuthorSchema = getAuthorSchema;
exports.toAuthor = toAuthor;
exports.getInventorySchema = getInventorySchema;
exports.toInventory = toInventory;
exports.getInventoryDetailSchema = getInventoryDetailSchema;
exports.toInventoryDetail = toInventoryDetail;
exports.getCartSchema = getCartSchema;
exports.toCart = toCart;
exports.refreshCart = refreshCart;
exports.showCartButton = showCartButton;
exports.getLiveCastListSchema = getLiveCastListSchema;
exports.toLiveCastList = toLiveCastList;
exports.getLiveCastPreviewSchema = getLiveCastPreviewSchema;
exports.toLiveCastPreview = toLiveCastPreview;
exports.getLiveCastRoomSchema = getLiveCastRoomSchema;
exports.toLiveCastRoom = toLiveCastRoom;
exports.setShareInfo = setShareInfo;
exports.callSharePane = callSharePane;
exports.sendDirectShare = sendDirectShare;
exports.setNaviBackground = setNaviBackground;
exports.configBtnClear = configBtnClear;
exports.configBtnSet = configBtnSet;
exports.configBtnSince610 = configBtnSince610;
exports.showCloseBtn = showCloseBtn;
exports.enableTransparent = enableTransparent;
exports.setTitle = setTitle;
exports.showNativeBarcodeScan = showNativeBarcodeScan;
exports.showNativeUpload = showNativeUpload;
exports.XViewClose = XViewClose;
exports.XViewConfigCloseButton = XViewConfigCloseButton;
exports.JDPaySdk_pay = JDPaySdk_pay;
exports.JDPaySdk_pop = JDPaySdk_pop;
exports.saveImageToPhoteAlbum = saveImageToPhoteAlbum;
exports.bindSocialAccountWithJsonString = bindSocialAccountWithJsonString;
exports.selectImage = selectImage;
exports.closeLivesWindow = closeLivesWindow;
exports.goWxUrl = goWxUrl;
exports.getFingerInfo = getFingerInfo;
exports.getNavHeight = getNavHeight;
exports.sourceIsReady = sourceIsReady;

Object.defineProperty(exports, '__esModule', { value: true });

})));
