import { assign, getUUID, isArray, serialize } from '@jmfe/jm-common';
import cookie from '@jmfe/jm-cookie';

/**
 * Callback index.
 */
var count = 0;

function jsonp(url, params, opts) {
	if (!opts) opts = {};

	var prefix = opts.prefix || 'jsonp';

	var id = opts.name || prefix + count++;
	id = opts.cdnCallback ? opts.cdnCallback : id;

	var param = opts.param || 'callback';
	var timeout = null != opts.timeout ? opts.timeout : 60000;
	var target = document.getElementsByTagName('script')[0] || document.head;
	var script = void 0;
	var timer = void 0;

	url = url + '?' + serialize(params);

	function cleanup() {
		if (script.parentNode) script.parentNode.removeChild(script);

		try {
			delete window[id];
		} catch (e) {
			window[id] = null;
		}
		if (timer) clearTimeout(timer);
	}

	function cancel() {
		if (window[id]) cleanup();
	}

	return new Promise(function (resolve, reject) {
		window[id] = function (data) {
			cleanup();
			resolve(data);
		};

		if (timeout) {
			timer = setTimeout(function () {
				cleanup();
				reject(new Error('Timeout'));
			}, timeout);
		}

		// add qs component
		url += (~url.indexOf('?') ? '&' : '?') + param + '=' + encodeURIComponent(id);
		url = url.replace('?&', '?');

		// create script
		script = document.createElement('script');
		script.src = url;
		script.onerror = function () {
			return reject(new Error('Script loading error.'));
		};
		target.parentNode.insertBefore(script, target);
	});
}

function checkStatus(response) {
	if (response.status >= 200 && response.status < 300) {
		return response;
	} else {
		var error = new Error(response.statusText);
		error.response = response;
		throw error;
	}
}

function parseJSON(response) {
	return response.json();
}

var ajax = {};

ajax.get = function (url, params, opts) {
	url = url + '?' + serialize(params);
	var options = assign({
		method: 'GET',
		credentials: 'include'
	}, opts);
	return fetch(url, options).then(checkStatus).then(parseJSON);
};

ajax.post = function (url, params, opts) {
	var options = assign({
		method: 'POST',
		credentials: 'include',
		headers: {},
		body: JSON.stingify(params)
	}, opts);

	options.headers['Accept'] = 'application/json';
	options.headers['Content-Type'] = 'application/json';

	return fetch(url, options).then(checkStatus).then(parseJSON);
};

var getIdsKey = function (ids) {
    return 'jsonp' + ids.split(',').join('i');
};

var apiBase = '//api.m.jd.com/client.action';

var clientParams = {
	clientVersion: '1.0.0',
	client: 'wh5'
};
var uuid = getUUID() || cookie.get('mba_muid') || '';

var CDNConfs = [];

/**
 * 通过 id 获取广告组
 * @param  {string| string[]} ids
 * @param  {boolean} [isMain] 是否用于主会场
 * @return {Promise}
 */
function getAdvGroups(ids) {
	var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	if (isArray(ids)) ids = ids.join(',');
	var key = getIdsKey(ids);
	var data = CDNConfs.filter(function (conf) {
		return conf.key === key;
	});
	if (data.length) {
		return jsonp(data[0].path, {}, {
			cdnCallback: data[0].jsonpCallback
		});
	} else {
		var isMain = options.isMain;

		var params = assign({
			functionId: isMain ? 'queryMainBabelAdverts' : 'getBabelAdvertInfo',
			body: JSON.stringify({
				ids: ids
			}),
			uuid: uuid
		}, clientParams);

		return jsonp(apiBase, params, options);
	}
}

/**
 * 通过 id 获取商品组
 * @param  {string | string[]} ids
 * @param  {boolean} today 是否只显示开始时间为今天的分期
 * @param  {boolean} [isMain] 是否用于主会场
 * @return {Promise}
 */
function getProductGroups(ids) {
	var today = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	var isMain = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	if (isArray(ids)) ids = ids.join(',');

	var key = getIdsKey(ids);
	var data = CDNConfs.filter(function (conf) {
		return conf.key === key;
	});
	if (data.length) {
		return jsonp(data[0].path, {}, {
			cdnCallback: data[0].jsonpCallback
		});
	} else {
		var params = assign({
			functionId: isMain ? 'queryMainBabelProducts' : 'getBabelProductInfo',
			body: JSON.stringify({
				ids: ids,
				todayFlag: today ? 'Y' : 'N'
			}),
			uuid: uuid
		}, clientParams);
		return jsonp(apiBase, params);
	}
}

/**
 * 通过 id 获取当前分期的商品组
 * @param  {string | string[]} ids
 * @param  {boolean} [isMain] 是否用于主会场
 * @return {Promise}
 */
function getProductGroupsCurStage(ids) {
	var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	if (isArray(ids)) ids = ids.join(',');

	var key = getIdsKey(ids);
	var data = CDNConfs.filter(function (conf) {
		return conf.key === key;
	});
	if (data.length) {
		return jsonp(data[0].path, {}, {
			cdnCallback: data[0].jsonpCallback
		});
	} else {
		var isMain = options.isMain;

		var params = assign({
			functionId: isMain ? 'queryMainBabelProducts' : 'getBabelProductInfo',
			body: JSON.stringify({
				ids: ids,
				currentStageFlag: 'Y'
			}),
			uuid: uuid
		}, clientParams);
		return jsonp(apiBase, params, options);
	}
}

/**
 * 获取特定商品组的特定分期
 * @param  {string} groupId
 * @param  {string} stageId
 * @param  {boolean} [isMain] 是否用于主会场
 * @return {Promise}
 */
function getProductGroupStage(groupId, stageId) {
	var isMain = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	var key = getIdsKey(groupId);
	var data = CDNConfs.filter(function (conf) {
		return conf.key === key;
	});
	if (data.length) {
		return jsonp(data[0].path, {}, {
			cdnCallback: data[0].jsonpCallback
		});
	} else {
		var params = assign({
			functionId: isMain ? 'queryMainBabelProducts' : 'getBabelProductInfo',
			body: JSON.stringify({
				groupId: groupId,
				stageId: stageId
			}),
			uuid: uuid
		}, clientParams);
		return jsonp(apiBase, params);
	}
}

/**
 * 获取特定商品组的多个连续分期
 * num 和 position 参数从1开始计算
 * @param  {string} groupId
 * @param  {number} num
 * @param  {number} [position] position > 1, 如果缺失，默认为当前分期开始
 * @param  {boolean} [isMain] 是否用于主会场
 * @return {Promise}
 */
function getProductGroupStages(groupId, num, position) {
	var isMain = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

	var key = getIdsKey(groupId);
	var staticData = CDNConfs.filter(function (conf) {
		return conf.key === key;
	});
	if (staticData.length) {
		return jsonp(staticData[0].path, {}, {
			cdnCallback: staticData[0].jsonpCallback
		});
	} else {
		var data = {
			groupId: groupId,
			num: num
		};
		if (position) data.position = position;
		var params = assign({
			functionId: isMain ? 'queryMainBabelProducts' : 'getBabelProductInfo',
			body: JSON.stringify(data),
			uuid: uuid
		}, clientParams);
		return jsonp(apiBase, params);
	}
}

/**
 * 预约活动
 * @param  {string} moduleId
 * @return {Promise}
 */
function makeAppointment(moduleId) {
	var params = assign({
		functionId: 'appointSMS',
		body: JSON.stringify({
			moduleId: moduleId
		})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 预约商品
 * @param  {string} skuId
 * @return {Promise}
 */
function booking(skuId) {
	var params = assign({
		functionId: 'makeProductAppointment',
		body: JSON.stringify({
			skuId: skuId
		})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 获取商品预约信息
 * @param  {string} activityId
 * @param  {string | string[]} skuIds
 * @return {Promise}
 */
function getBookingInfo(activityId, skuIds) {
	if (isArray(skuIds)) {
		skuIds = skuIds.join(',');
	}
	var params = assign({
		functionId: 'queryProductAppointments',
		body: JSON.stringify({
			skuIds: skuIds,
			activityId: activityId
		})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 获取活动抽奖信息
 * @param  {string} activityId
 * @param  {string} pageId
 * @param  {string} moduleId
 * @return {Promise}
 */
function getLuckyDrawInfo(activityId, pageId, moduleId) {
	var params = assign({
		functionId: 'babelQueryActivity',
		body: JSON.stringify({
			activityId: activityId,
			pageId: pageId,
			moduleId: moduleId
		})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * @typedef {Object} LuckyDrawStockJson
 * @property {string} code
 * @property {string} subCode
 * @property {Object[]} moduleStocks
 * @property {string} moduleStocks[].mdouleId   - 加密后的
 * @property {string} moduleStocks[].status  - "0"表示无库存， "1"表示有库存
 * @property {string} msg
 * @property {string} returnMsg
 */

/**
 * 获取由doLuckyDraw的优惠券库存是否为空的接口
 * @param  {string[]} moduleIds - moduleId是加密后的
 * @return {Promise<LuckyDrawStockJson>}
 */
function batchLuckyDrawStock(moduleIds) {
	var params = assign({
		functionId: 'batchQryModStock',
		body: JSON.stringify({
			moduleIds: moduleIds
		})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 抽奖
 * @param  {string} activityId
 * @param  {string} pageId
 * @param  {string} moduleId
 * @return {Promise}
 */
function doLuckyDraw(activityId, pageId, moduleId) {
	var params = assign({
		functionId: 'babelActivityLuckDraw',
		body: JSON.stringify({
			activityId: activityId,
			pageId: pageId,
			moduleId: moduleId
		})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 延迟(异步)抽奖
 * @param  {string} activityId
 * @param  {string} pageId
 * @param  {string} moduleId
 * @return {Promise}
 */
function doLuckyDrawAsync(activityId, pageId, moduleId) {
	var params = assign({
		functionId: 'asyncLottery',
		body: JSON.stringify({
			activityId: activityId,
			pageId: pageId,
			moduleId: moduleId
		})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 加入指定商品到购物车
 * @param {string} skuId
 * @param {string} [sid]
 * @param {number} [needLogin] - 是否需要登录才能加购物车，0不需要登录，1需要登录
 */
function addToCart(skuId) {
	var sid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	var needLogin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	var params = {
		sid: sid,
		num: 1,
		wareId: skuId,
		actId: needLogin //等于1时，需要登录才能加购物车
	};
	return ajax.get('//m.jd.com/cart/add.json', params, {
		credentials: 'omit'
	});
}

/**
 * 验证是否为新用户
 * @return {Promise}
 */
function verifyNewUser() {
	var params = assign({
		functionId: 'verifyAppNewUser',
		body: JSON.stringify({})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 从服务器获取分享信息
 * @param  {string} activityId
 * @param  {string} pageId
 * @return {Promise}
 */
function getShareInfo(activityId, pageId) {
	var params = assign({
		functionId: 'babelActivityGetShareInfo',
		body: JSON.stringify({
			activityId: activityId,
			pageId: pageId
		})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 清单活动列表接口（曾用于主会场展示）
 * @param {number} page - 清单频道全部接BI 用page来分页
 * @param {number} lastId - 上一页的最后一个清单的id
 * @param {string} [tag] - 不传默认年货节
 */
function getDiscoveryInventoryList(page, lastId) {
	var tag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

	var params = assign({
		functionId: 'jdDiscoveryInventoryListing',
		body: JSON.stringify({
			page: page,
			lastId: lastId,
			tag: tag
		}),
		uuid: getUUID() || cookie.get('mba_muid') || ''
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 验证是否为新用户及plus用户
 * @return {Promise}
 */
function verifyPlusAndNewUser() {
	var params = assign({
		functionId: 'verifyPlusAndNewUser',
		body: JSON.stringify({})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 排行榜类别接口
 * 旧 http://cf.jd.com/pages/viewpage.action?pageId=75282642
 * 新 http://cf.jd.com/pages/viewpage.action?pageId=80789759
 * @param {Obect} options
 * @param {string} options.rankId - 榜单Id,eg:rank3001
 * @param {string} options.provinceId - 省Id,默认使用北京(1)
 * @param {string} options.time - 只有两个值：”1DAY”，”30DAY” 分别表示1天的数据和30天的数据。
 * @param {string} [options.cityId]
 * @param {string} [options.cateList]
 * @return {Promise}
 */
function getRankCates(options) {
	var defaults = {
		rankId: 'rank3001',
		provinceId: '1',
		time: '1DAY'
	};
	var settings = assign(defaults, options);
	var params = assign({
		functionId: "rankList",
		body: JSON.stringify(settings)
	}, clientParams);
	return jsonp(apiBase, params, {
		param: 'jsonp'
	});
}

/**
 * 排行榜618主会场专用接口
 * http://cf.jd.com/pages/viewpage.action?pageId=81141145
 * @param {Obect} options
 * @param {string} options.cateId - 类别id
 * @param {string} options.provinceId - 省Id,默认使用北京
 * @param {string} options.time - 只有两个值：”1DAY”，”30DAY” 分别表示1天的数据和30天的数据。
 * @param {string} [options.cityId]
 * @param {string} [options.cateList]
 * @return {Promise}
 */
function getRankParty(options) {
	var defaults = {
		provinceId: '1',
		time: '1DAY'
	};
	var settings = assign(defaults, options);
	var params = assign({
		functionId: "rankParty",
		body: JSON.stringify(settings)
	}, clientParams);
	return jsonp(apiBase, params, {
		param: 'jsonp'
	});
}

/**
 * 用于plus领券接口/**
 * 延迟(异步)抽奖
 * @param  {string} activityId -活动id（加密）
 * @param  {string} pageId - 页面id 
 * @param  {string} moduleId - 组件id（加密）
 * @return {Promise}
 */
function bICouponDraw(activityId, pageId, moduleId) {
	var params = assign({
		functionId: 'bICouponDraw',
		body: JSON.stringify({
			activityId: activityId,
			pageId: pageId,
			moduleId: moduleId
		})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 
 * 
 * @export
 * @param {array} data 静态化数据接口返回的data数组
 */
function setCDNConf(data) {
	if (Object.prototype.toString.call(data).toLowerCase().indexOf('array') > 0) {
		CDNConfs = data;
	} else {
		console.log('setCDNConf需要传入数组');
	}
}

export { getAdvGroups, getProductGroups, getProductGroupsCurStage, getProductGroupStage, getProductGroupStages, makeAppointment, booking, getBookingInfo, getLuckyDrawInfo, batchLuckyDrawStock, doLuckyDraw, doLuckyDrawAsync, addToCart, verifyNewUser, getShareInfo, getDiscoveryInventoryList, verifyPlusAndNewUser, getRankCates, getRankParty, bICouponDraw, setCDNConf, jsonp, ajax };
