import {
	isArray,
	assign,
	getUUID
} from '@jmfe/jm-common';
import cookie from '@jmfe/jm-cookie';

import jsonp from './jsonp';
import ajax from './ajax';
import getIdsKey from './getIdsKey';

const apiBase = '//api.m.jd.com/client.action';

const clientParams = {
	clientVersion: '1.0.0',
	client: 'wh5'
};
const uuid = getUUID() || cookie.get('mba_muid') || '';

let CDNConfs = [];

/**
 * 通过 id 获取广告组
 * @param  {string| string[]} ids
 * @param  {boolean} [isMain] 是否用于主会场
 * @return {Promise}
 */
export function getAdvGroups(ids, options = {}) {
	if (isArray(ids)) ids = ids.join(',');
	const key = getIdsKey(ids);
	const data = CDNConfs.filter(conf => conf.key === key);
	if (data.length) {
		return jsonp(data[0].path, {}, {
			cdnCallback: data[0].jsonpCallback
		});
	} else {
		let {
			isMain
		} = options;
		let params = assign({
			functionId: isMain ? 'queryMainBabelAdverts' : 'getBabelAdvertInfo',
			body: JSON.stringify({
				ids: ids
			}),
			uuid
		}, clientParams);

		return jsonp(apiBase, params, options);
	}
}

/**
 * 通过 id 获取商品组
 * @param  {string | string[]} ids
 * @param  {boolean} today 是否只显示开始时间为今天的分期
 * @param  {boolean} [isMain] 是否用于主会场
 * @return {Promise}
 */
export function getProductGroups(ids, today = false, isMain = false) {
	if (isArray(ids)) ids = ids.join(',');

	const key = getIdsKey(ids);
	const data = CDNConfs.filter(conf => conf.key === key);
	if (data.length) {
		return jsonp(data[0].path, {}, {
			cdnCallback: data[0].jsonpCallback
		});
	} else {
		let params = assign({
			functionId: isMain ? 'queryMainBabelProducts' : 'getBabelProductInfo',
			body: JSON.stringify({
				ids: ids,
				todayFlag: today ? 'Y' : 'N',
			}),
			uuid
		}, clientParams);
		return jsonp(apiBase, params);
	}
}

/**
 * 通过 id 获取当前分期的商品组
 * @param  {string | string[]} ids
 * @param  {boolean} [isMain] 是否用于主会场
 * @return {Promise}
 */
export function getProductGroupsCurStage(ids, options = {}) {
	if (isArray(ids)) ids = ids.join(',');

	const key = getIdsKey(ids);
	const data = CDNConfs.filter(conf => conf.key === key);
	if (data.length) {
		return jsonp(data[0].path, {}, {
			cdnCallback: data[0].jsonpCallback
		});
	} else {
		let {
			isMain
		} = options;
		let params = assign({
			functionId: isMain ? 'queryMainBabelProducts' : 'getBabelProductInfo',
			body: JSON.stringify({
				ids: ids,
				currentStageFlag: 'Y',
			}),
			uuid
		}, clientParams);
		return jsonp(apiBase, params, options);
	}
}

/**
 * 获取特定商品组的特定分期
 * @param  {string} groupId
 * @param  {string} stageId
 * @param  {boolean} [isMain] 是否用于主会场
 * @return {Promise}
 */
export function getProductGroupStage(groupId, stageId, isMain = false) {
	const key = getIdsKey(groupId);
	const data = CDNConfs.filter(conf => conf.key === key);
	if (data.length) {
		return jsonp(data[0].path, {}, {
			cdnCallback: data[0].jsonpCallback
		});
	} else {
		let params = assign({
			functionId: isMain ? 'queryMainBabelProducts' : 'getBabelProductInfo',
			body: JSON.stringify({
				groupId,
				stageId
			}),
			uuid
		}, clientParams);
		return jsonp(apiBase, params);
	}
}

/**
 * 获取特定商品组的多个连续分期
 * num 和 position 参数从1开始计算
 * @param  {string} groupId
 * @param  {number} num
 * @param  {number} [position] position > 1, 如果缺失，默认为当前分期开始
 * @param  {boolean} [isMain] 是否用于主会场
 * @return {Promise}
 */
export function getProductGroupStages(groupId, num, position, isMain = false) {
	const key = getIdsKey(groupId);
	const staticData = CDNConfs.filter(conf => conf.key === key);
	if (staticData.length) {
		return jsonp(staticData[0].path, {}, {
			cdnCallback: staticData[0].jsonpCallback
		});
	} else {
		let data = {
			groupId,
			num
		};
		if (position) data.position = position;
		let params = assign({
			functionId: isMain ? 'queryMainBabelProducts' : 'getBabelProductInfo',
			body: JSON.stringify(data),
			uuid
		}, clientParams);
		return jsonp(apiBase, params);

	}
}

/**
 * 预约活动
 * @param  {string} moduleId
 * @return {Promise}
 */
export function makeAppointment(moduleId) {
	let params = assign({
		functionId: 'appointSMS',
		body: JSON.stringify({
			moduleId
		})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 预约商品
 * @param  {string} skuId
 * @return {Promise}
 */
export function booking(skuId) {
	let params = assign({
		functionId: 'makeProductAppointment',
		body: JSON.stringify({
			skuId
		})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 获取商品预约信息
 * @param  {string} activityId
 * @param  {string | string[]} skuIds
 * @return {Promise}
 */
export function getBookingInfo(activityId, skuIds) {
	if (isArray(skuIds)) {
		skuIds = skuIds.join(',');
	}
	let params = assign({
		functionId: 'queryProductAppointments',
		body: JSON.stringify({
			skuIds: skuIds,
			activityId
		})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 获取活动抽奖信息
 * @param  {string} activityId
 * @param  {string} pageId
 * @param  {string} moduleId
 * @return {Promise}
 */
export function getLuckyDrawInfo(activityId, pageId, moduleId) {
	let params = assign({
		functionId: 'babelQueryActivity',
		body: JSON.stringify({
			activityId,
			pageId,
			moduleId
		})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * @typedef {Object} LuckyDrawStockJson
 * @property {string} code
 * @property {string} subCode
 * @property {Object[]} moduleStocks
 * @property {string} moduleStocks[].mdouleId   - 加密后的
 * @property {string} moduleStocks[].status  - "0"表示无库存， "1"表示有库存
 * @property {string} msg
 * @property {string} returnMsg
 */

/**
 * 获取由doLuckyDraw的优惠券库存是否为空的接口
 * @param  {string[]} moduleIds - moduleId是加密后的
 * @return {Promise<LuckyDrawStockJson>}
 */
export function batchLuckyDrawStock(moduleIds) {
	const params = assign({
		functionId: 'batchQryModStock',
		body: JSON.stringify({
			moduleIds: moduleIds
		})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 抽奖
 * @param  {string} activityId
 * @param  {string} pageId
 * @param  {string} moduleId
 * @return {Promise}
 */
export function doLuckyDraw(activityId, pageId, moduleId) {
	let params = assign({
		functionId: 'babelActivityLuckDraw',
		body: JSON.stringify({
			activityId,
			pageId,
			moduleId
		})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 延迟(异步)抽奖
 * @param  {string} activityId
 * @param  {string} pageId
 * @param  {string} moduleId
 * @return {Promise}
 */
export function doLuckyDrawAsync(activityId, pageId, moduleId) {
	let params = assign({
		functionId: 'asyncLottery',
		body: JSON.stringify({
			activityId,
			pageId,
			moduleId
		})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 加入指定商品到购物车
 * @param {string} skuId
 * @param {string} [sid]
 * @param {number} [needLogin] - 是否需要登录才能加购物车，0不需要登录，1需要登录
 */
export function addToCart(skuId, sid = '', needLogin = 0 ) {
	let params = {
		sid,
		num: 1,
		wareId: skuId,
		actId: needLogin //等于1时，需要登录才能加购物车
	};
	return ajax.get('//m.jd.com/cart/add.json', params, {
		credentials: 'omit'
	});
}

/**
 * 验证是否为新用户
 * @return {Promise}
 */
export function verifyNewUser() {
	let params = assign({
		functionId: 'verifyAppNewUser',
		body: JSON.stringify({})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 从服务器获取分享信息
 * @param  {string} activityId
 * @param  {string} pageId
 * @return {Promise}
 */
export function getShareInfo(activityId, pageId) {
	let params = assign({
		functionId: 'babelActivityGetShareInfo',
		body: JSON.stringify({
			activityId,
			pageId
		})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 清单活动列表接口（曾用于主会场展示）
 * @param {number} page - 清单频道全部接BI 用page来分页
 * @param {number} lastId - 上一页的最后一个清单的id
 * @param {string} [tag] - 不传默认年货节
 */
export function getDiscoveryInventoryList(page, lastId, tag = '') {
	let params = assign({
		functionId: 'jdDiscoveryInventoryListing',
		body: JSON.stringify({
			page,
			lastId,
			tag
		}),
		uuid: getUUID() || cookie.get('mba_muid') || ''
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 验证是否为新用户及plus用户
 * @return {Promise}
 */
export function verifyPlusAndNewUser() {
	let params = assign({
		functionId: 'verifyPlusAndNewUser',
		body: JSON.stringify({})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 排行榜类别接口
 * 旧 http://cf.jd.com/pages/viewpage.action?pageId=75282642
 * 新 http://cf.jd.com/pages/viewpage.action?pageId=80789759
 * @param {Obect} options
 * @param {string} options.rankId - 榜单Id,eg:rank3001
 * @param {string} options.provinceId - 省Id,默认使用北京(1)
 * @param {string} options.time - 只有两个值：”1DAY”，”30DAY” 分别表示1天的数据和30天的数据。
 * @param {string} [options.cityId]
 * @param {string} [options.cateList]
 * @return {Promise}
 */
export function getRankCates(options) {
	const defaults = {
		rankId: 'rank3001',
		provinceId: '1',
		time: '1DAY'
	}
	const settings = assign(defaults, options)
	const params = assign({
		functionId: "rankList",
		body: JSON.stringify(settings)
	}, clientParams);
	return jsonp(apiBase, params, {
		param: 'jsonp'
	});
}

/**
 * 排行榜618主会场专用接口
 * http://cf.jd.com/pages/viewpage.action?pageId=81141145
 * @param {Obect} options
 * @param {string} options.cateId - 类别id
 * @param {string} options.provinceId - 省Id,默认使用北京
 * @param {string} options.time - 只有两个值：”1DAY”，”30DAY” 分别表示1天的数据和30天的数据。
 * @param {string} [options.cityId]
 * @param {string} [options.cateList]
 * @return {Promise}
 */
export function getRankParty(options) {
	const defaults = {
		provinceId: '1',
		time: '1DAY'
	}
	const settings = assign(defaults, options);
	const params = assign({
		functionId: "rankParty",
		body: JSON.stringify(settings)
	}, clientParams);
	return jsonp(apiBase, params, {
		param: 'jsonp'
	});
}

/**
 * 用于plus领券接口/**
 * 延迟(异步)抽奖
 * @param  {string} activityId -活动id（加密）
 * @param  {string} pageId - 页面id 
 * @param  {string} moduleId - 组件id（加密）
 * @return {Promise}
 */
export function bICouponDraw(activityId, pageId, moduleId) {
	const params = assign({
		functionId: 'bICouponDraw',
		body: JSON.stringify({
			activityId,
			pageId,
			moduleId
		})
	}, clientParams);
	return jsonp(apiBase, params);
}

/**
 * 
 * 
 * @export
 * @param {array} data 静态化数据接口返回的data数组
 */
export function setCDNConf(data) {
	if (Object.prototype.toString.call(data).toLowerCase().indexOf('array') > 0) {
		CDNConfs = data;
	} else {
		console.log('setCDNConf需要传入数组')
	}
};

export {
	jsonp
};

export {
	ajax
};
