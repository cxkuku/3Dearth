function optionExtend(opts) {
	return {
		path: opts.path,
		domain: opts.domain,
		expires: opts.expires,
		secure: opts.secure !== undefined ? opts.secure : false
	};
}

function stingifyOpts(opts) {
	opts = opts || {};

	var str = '';
	str += opts.path ? ';path=' + opts.path : '';
	str += opts.domain ? ';domain=' + opts.domain : '';
	str += opts.expires ? ';expires=' + opts.expires.toUTCString() : '';
	str += opts.secure ? ';secure' : '';
	return str;
}

var index = {
	set: function set(key, val, opts) {
		if (typeof key !== 'string' || key === '') return this;
		if (typeof val === 'undefined') return this;
		if (opts) opts = optionExtend(opts);
		document.cookie = key + '=' + encodeURIComponent(val) + stingifyOpts(opts);
		return this;
	},
	get: function get(key) {
		key = '(?:^|; )' + key + '(?:=([^;]*?))?(?:;|$)';
		var reKey = new RegExp(key);
		var res = reKey.exec(document.cookie);
		return res !== null ? decodeURIComponent(res[1]) : null;
	},
	all: function all() {
		var cookies = {};
		document.cookie.split(/;\s/).forEach(function (cookie) {
			var tmp = cookie.split('=');
			cookies[tmp[0]] = tmp.length === 2 ? tmp[1] : undefined;
		});
		return cookies;
	},
	remove: function remove(key, opts) {
		opts = opts || {};
		opts.expires = new Date(0);
		return this.set(key, '', opts);
	},
	empty: function empty() {
		var _this = this;

		document.cookie.split(/;\s/).forEach(function (cookie) {
			return _this.remove(cookie.split('=')[0] || cookie);
		});
		return this;
	},
	isEnabled: function isEnabled() {
		return navigator.cookieEnabled;
	}
};

export default index;
